<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[iOS 本地打包工具]]></title>
      <url>http://yoursite.com/2016/08/17/iOS-%E6%9C%AC%E5%9C%B0%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/954071-c6f168aad484dd6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自动打包"></p>
<p>1、<strong>为什么要自动打包工具？</strong></p>
<p>每修改一个问题，测试都让你打包一个上传fir ， 你要clean -&gt; 编译打包 -&gt; 上传fir -&gt; 通知测试。而且打包速度好慢，太浪费时间了。如果有一个工具能自动的帮你做完上面所有的事情，岂不是快哉？<br><a id="more"></a><br>2、<strong>网上有那么多自动打包工具，我直接下载就行了为啥还要学习？</strong></p>
<p>没错网上有很多打包工具，包括github上也有一些直接从github下载并打包上传的，但是他们的不一定适合你，首先下载下来要配置各种参数，不会配，还有网上大多是针对普通项目，但是我们项目是cocoaPods管理的，编译的是 <code>xxx.xcworkspace</code> 不是 <code>xxx.xcodeproj</code> 。怎么办 ， <code>xxx.xcodeproj</code> 自动编译后就在你项目目录下会有 <code>xxx.app</code> 但是 <code>xxx.xcworkspace</code> 找不到怎么办？怎么指定目录 ， 这些网上的库大都没有的。 </p>
<p>3、<strong>需要哪些准备工作？</strong></p>
<p>首先你得有装<code>xcode</code> , <code>python3.5</code> （我装的版本,其他版本也行）,  待打包的项目。安装相关软件，随便搜索下就可以了。</p>
<p>废话结束，开始正文。本文介绍的是自动clean本地项目，编译 打包 上传fir 邮件通知相关人员。不涉及从git上下载。原理就是利用<code>python</code>执行控制台命令。对<br>iOS项目进行打包</p>
<h3 id="xcode控制台命令"><a href="#xcode控制台命令" class="headerlink" title="xcode控制台命令"></a>xcode控制台命令</h3><p><code>xcode</code> 控制台命令基本都是以 <code>xcodebuild</code> 开头的介绍几个简单的命令，大家可以在命令行试试。</p>
<ul>
<li><code>xcodebuild -version</code> 查看xcode的版本号和build的版本号</li>
<li><code>xcodebuild -showsdks</code> 显示当前系统的SDK、及其版本</li>
<li><code>xcodebuild -list</code> 先 <code>cd</code> 到工程目录下执行此命令 显示<code>target</code> <code>Schemes</code> 等</li>
</ul>
<h4 id="没有使用-cocoaPods-项目的编译"><a href="#没有使用-cocoaPods-项目的编译" class="headerlink" title="没有使用 cocoaPods 项目的编译"></a>没有使用 <code>cocoaPods</code> 项目的编译</h4><p>如果你的项目是普通的项目没有使用cocoaPods 那么 cd 到工程目录下直接执行 <code>xcodebuild build</code> ，就会自动编译了 参数都是默认 默认build release。<br>你也可以指定 <code>xcodebuild -configuration debug build</code> build的时候会在你工程目录下生成一个build文件夹，<code>build/Release-iphoneos/xx.app</code><br>就是一会打包成ipa需要的文件。 第一次build速度会比较慢，要把编译环境拉下来，不要删除build文件夹，以后build 速度就会变快。 </p>
<h4 id="使用了-cocoaPods-项目的编译"><a href="#使用了-cocoaPods-项目的编译" class="headerlink" title="使用了 cocoaPods 项目的编译"></a>使用了 <code>cocoaPods</code> 项目的编译</h4><p>如果不幸你也和我一样使用了<code>cocoaPods</code> , 其实也没啥不幸的 ，只是编译的时候就比较麻烦了 ，首先还是 cd 到项目目录 。但是你要指定编译文件和 <code>scheme</code><br>而且还要指定build后build文件夹的位置，如果位置找不到，后面怎么自动打包ipa？。</p>
<p>我这里的命令大概是这样的：<br><code>xcodebuild -workspace xxx.xcworkspace  -scheme 你的scheme -configuration debug -derivedDataPath 指定路径 ONLY_ACTIVE_ARCH=NO</code><br>这样就能正常编译并把build指定到我们想要去的目录</p>
<h4 id="打包ipa"><a href="#打包ipa" class="headerlink" title="打包ipa"></a>打包ipa</h4><p>打包ipa只要上面路径对了，打包指定从.app 文件的路径 ， 打包到你指定地方就行了。<br>命令：<br><code>xcrun -sdk iphoneos PackageApplication -v 这里填.app的路径 -o 指定存放ipa路径/文件名.ipa</code></p>
<h3 id="python实现篇"><a href="#python实现篇" class="headerlink" title="python实现篇"></a>python实现篇</h3><p>上面只是说了下编译的原理,下面看下怎么通过python自动处理这些任务 。</p>
<h4 id="clean、编译、打包"><a href="#clean、编译、打包" class="headerlink" title="clean、编译、打包"></a>clean、编译、打包</h4><p>首先创建一个xxx.py文件，需要你懂点<code>python</code> 语法，不懂就直接copy代码。不要改<code>tab</code> 。python的语法是严格按照<code>tab</code>区分的。后面我会放上我的代码，你们改改<br>变量就可以使用。</p>
<p>首先你需要引入一些外部依赖。设置编码为utf-8</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">from</span> email <span class="keyword">import</span> encoders</div><div class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> parseaddr, formataddr</div><div class="line"><span class="keyword">import</span> smtplib</div></pre></td></tr></table></figure>
<p>第一步 ， 声明一些变量</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 项目根目录</span></div><div class="line">project_path = <span class="string">"/Users/xx/project"</span></div><div class="line"><span class="comment"># 编译成功后.app所在目录</span></div><div class="line">app_path = <span class="string">"/Users/xx/project/build/Build/Products/Release-iphoneos/xxx.app"</span></div><div class="line"><span class="comment"># 指定项目下编译目录</span></div><div class="line">build_path = <span class="string">"build"</span></div><div class="line"><span class="comment"># 打包后ipa存储目录</span></div><div class="line">targerIPA_parth = <span class="string">"/Users/xx/Desktop"</span></div></pre></td></tr></table></figure>
<p>第二步，clean，和创建一个文件夹，这里的示例是针对有使用cocoaPods的项目 ， 如果没有使用 不用创建文件夹 ，命令自行简化</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 清理项目 创建build目录</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_project_mkdir_build</span><span class="params">()</span>:</span></div><div class="line">    os.system(<span class="string">'cd %s;xcodebuild clean'</span> % project_path) <span class="comment"># clean 项目</span></div><div class="line">    os.system(<span class="string">'cd %s;mkdir build'</span> % project_path) <span class="comment"># 创建目录</span></div></pre></td></tr></table></figure>
<p><code>%s</code> 是py的占位符，字符串类型。后面是真正的填充。</p>
<p>第三步编译项目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_project</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"build release start"</span>)</div><div class="line">    os.system (<span class="string">'cd %s;xcodebuild -list'</span>)</div><div class="line">    os.system (<span class="string">'cd %s;xcodebuild -workspace xxx.xcworkspace  -scheme xxx -configuration release -derivedDataPath %s ONLY_ACTIVE_ARCH=NO || exit'</span> % (project_path,build_path))</div></pre></td></tr></table></figure>
<p>不知道<code>scheme</code>是啥的<code>xcodebuild -list</code> 自己查</p>
<p>第四步 打包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 打包ipa 并且保存在桌面</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_ipa</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> ipa_filename</div><div class="line">    ipa_filename = time.strftime(<span class="string">'yourproject_%Y-%m-%d-%H-%M-%S.ipa'</span>,time.localtime(time.time()))</div><div class="line">    os.system (<span class="string">'xcrun -sdk iphoneos PackageApplication -v %s -o %s/%s'</span> % (app_path,targerIPA_parth,ipa_filename))</div></pre></td></tr></table></figure></p>
<p>然后你现在再编写个方法，按顺序调用就可以编译打包了 ，执行完会看到桌面的ipa</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 清理并创建build目录</span></div><div class="line">    clean_project_mkdir_build()</div><div class="line">    <span class="comment"># 编译coocaPods项目文件并 执行编译目录</span></div><div class="line">    build_project()</div><div class="line">    <span class="comment"># 打包ipa 并制定到桌面</span></div><div class="line">    build_ipa()</div></pre></td></tr></table></figure>
<p>执行就在最下面直接调用就行了 <code>main()</code></p>
<h4 id="上传fir"><a href="#上传fir" class="headerlink" title="上传fir"></a>上传fir</h4><p>我们是把代码上传到fir测试的，如果你们用的蒲公英或者其他，请自行搜索。<br>通过 <code>gem install fir-cli</code> 如果你没有ruby环境，自行搜索 </p>
<p>安装完成后，在命令行输入fir 回车 。会有fir的命令提示。我们上传fir需要fir的API_TOKEN , 去fir官网登录找好就能找到。<br>拿到那一串串字符，在变量区加上<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># firm的api token</span></div><div class="line">fir_api_token = <span class="string">"xxxxxxxxxxxxxxxxxxxxxxxxxx"</span></div></pre></td></tr></table></figure></p>
<p>然后命令传入ipa目录和token就可以上传了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#上传</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_fir</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">"%s/%s"</span> % (targerIPA_parth,ipa_filename)):</div><div class="line">        print(<span class="string">'watting...'</span>)</div><div class="line">        <span class="comment"># 直接使用fir 有问题 这里使用了绝对地址 在终端通过 which fir 获得</span></div><div class="line">        ret = os.system(<span class="string">"/usr/local/bin/fir p '%s/%s' -T '%s'"</span> % (targerIPA_parth,ipa_filename,fir_api_token))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"没有找到ipa文件"</span>)</div></pre></td></tr></table></figure></p>
<p>这里也有遇到一个=坑，就是在终端直接fir 带后面的就可以执行 ，但是在这里识别不了命令，必须制定全路径，怎么找命令的全路径呢？终端输入 <code>which fir</code></p>
<h4 id="发邮件"><a href="#发邮件" class="headerlink" title="发邮件"></a>发邮件</h4><p>具体发邮件功能看代码，这里有几个变量。我使用的是新浪邮箱发的，smtp服务器 ， 如果你是 pop3 请更换，还要在邮箱里开启相应的服务</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from_addr = <span class="string">"xxxx@sina.com"</span></div><div class="line">password = <span class="string">"*****"</span></div><div class="line">smtp_server = <span class="string">"smtp.sina.com"</span></div><div class="line">to_addr = <span class="string">'aaa@qq.com,bbbb@qq.com'</span></div></pre></td></tr></table></figure>
<p>然后发邮件的方法</p>
<p>我们的fir路径是固定的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 发邮件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">()</span>:</span></div><div class="line">    msg = MIMEText(<span class="string">'xxx iOS测试项目已经打包完毕，请前往 http://fir.im/xxxxx 下载测试！'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</div><div class="line">    msg[<span class="string">'From'</span>] = _format_addr(<span class="string">'自动打包系统 &lt;%s&gt;'</span> % from_addr)</div><div class="line">    msg[<span class="string">'To'</span>] = _format_addr(<span class="string">'xxx测试人员 &lt;%s&gt;'</span> % to_addr)</div><div class="line">    msg[<span class="string">'Subject'</span>] = Header(<span class="string">'xxx iOS客户端打包程序'</span>, <span class="string">'utf-8'</span>).encode()</div><div class="line">    server = smtplib.SMTP(smtp_server, <span class="number">25</span>)</div><div class="line">    server.set_debuglevel(<span class="number">1</span>)</div><div class="line">    server.login(from_addr, password)</div><div class="line">    server.sendmail(from_addr, [to_addr], msg.as_string())</div><div class="line">    server.quit()</div></pre></td></tr></table></figure></p>
<p>然后执行顺序是这样的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 清理并创建build目录</span></div><div class="line">    clean_project_mkdir_build()</div><div class="line">    <span class="comment"># 编译coocaPods项目文件并 执行编译目录</span></div><div class="line">    build_project()</div><div class="line">    <span class="comment"># 打包ipa 并制定到桌面</span></div><div class="line">    build_ipa()</div><div class="line">    <span class="comment"># 上传fir</span></div><div class="line">    upload_fir()</div><div class="line">    <span class="comment"># 发邮件</span></div><div class="line">    send_mail()</div><div class="line"></div><div class="line"><span class="comment"># 执行</span></div><div class="line">main()</div></pre></td></tr></table></figure></p>
<p>本文重点在自动打包命令上，python代码感兴趣的可以去<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python教程</a> 学习。<br>本文代码已经托管在github上：<a href="https://github.com/smalldu/autoipa" target="_blank" rel="external">https://github.com/smalldu/autoipa</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift(七) Mathematical and Aggregate Operators（数学和聚集操作）]]></title>
      <url>http://yoursite.com/2016/08/16/RxSwift-%E4%B8%83-Mathematical-and-Aggregate-Operators%EF%BC%88%E6%95%B0%E5%AD%A6%E5%92%8C%E8%81%9A%E9%9B%86%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>本文大多数内容来自RxSwift项目中的<em>Rx.playground</em> , 个人学习记录 。仅供参考，有任何错误，请及时指出。</p>
</blockquote>
<h4 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h4><p>将一个<code>Observable</code> sequence 转成一个 <code>Array</code> , 只有一个数组元素的<code>Observable</code> 序列</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="type">Observable</span>.range(start: <span class="number">1</span>, <span class="built_in">count</span>: <span class="number">5</span>)</div><div class="line">    .toArray()</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>结果 ： <code>Next([1, 2, 3, 4, 5]) Completed</code> </p>
<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>从一个初始值 挨个执行运算 得到最后结果 返回一个单个结果的 <code>Observable</code> 序列</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line"><span class="type">Observable</span>.of(<span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>)</div><div class="line">    .<span class="built_in">reduce</span>(<span class="number">1</span>, accumulator: +)</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>结果 : <code>1111</code></p>
<h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>将多个 <code>Observable</code> 连接起来 只有当前一个执行结束了 才开始第二个 </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="keyword">let</span> subject1 = <span class="type">BehaviorSubject</span>(value: <span class="string">"🍎"</span>)</div><div class="line"><span class="keyword">let</span> subject2 = <span class="type">BehaviorSubject</span>(value: <span class="string">"🐶"</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> variable = <span class="type">Variable</span>(subject1)</div><div class="line"></div><div class="line">variable.asObservable()</div><div class="line">    .concat()</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">subject1.onNext(<span class="string">"🍐"</span>)</div><div class="line">subject1.onNext(<span class="string">"🍊"</span>)</div><div class="line"></div><div class="line">variable.value = subject2</div><div class="line"></div><div class="line">subject2.onNext(<span class="string">"I would be ignored"</span>)</div><div class="line">subject2.onNext(<span class="string">"I would be ignored"</span>)</div><div class="line">subject2.onNext(<span class="string">"I would be ignored"</span>)</div><div class="line">subject2.onNext(<span class="string">"🐱"</span>)</div><div class="line"></div><div class="line">subject1.onNext(<span class="string">"🍊"</span>)</div><div class="line">subject1.onCompleted()</div><div class="line"></div><div class="line">subject2.onNext(<span class="string">"🐭"</span>)</div></pre></td></tr></table></figure>
<p>结果 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Next(🍎)</div><div class="line">Next(🍐)</div><div class="line">Next(🍊)</div><div class="line">Next(🍊)</div><div class="line">Next(🐱)</div><div class="line">Next(🐭)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift(六) Filtering and Conditional Operators（过滤和条件操作）]]></title>
      <url>http://yoursite.com/2016/08/16/RxSwift-%E5%85%AD-Filtering-and-Conditional-Operators%EF%BC%88%E8%BF%87%E6%BB%A4%E5%92%8C%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>本文大多数内容来自RxSwift项目中的<em>Rx.playground</em> , 个人学习记录 。仅供参考，有任何错误，请及时指出。</p>
</blockquote>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>按照指定条件过滤出符合条件的结果<br><a id="more"></a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">      </div><div class="line"><span class="type">Observable</span>.of(</div><div class="line">    <span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>,</div><div class="line">    <span class="string">"🐸"</span>, <span class="string">"🐱"</span>, <span class="string">"🐰"</span>,</div><div class="line">    <span class="string">"🐹"</span>, <span class="string">"🐸"</span>, <span class="string">"🐱"</span>)</div><div class="line">    .<span class="built_in">filter</span> &#123;</div><div class="line">        $<span class="number">0</span> == <span class="string">"🐱"</span></div><div class="line">    &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure></p>
<p>结果 ：<code>🐱 🐱 🐱</code>  </p>
<h4 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h4><p>遇到连续重复的 只取一个 直到有不一样的</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐷"</span>, <span class="string">"🐱"</span>, <span class="string">"🐱"</span>, <span class="string">"🐱"</span>, <span class="string">"🐵"</span>, <span class="string">"🐱"</span>)</div><div class="line">    .distinctUntilChanged()</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">🐱</div><div class="line">🐷</div><div class="line">🐱</div><div class="line">🐵</div><div class="line">🐱</div></pre></td></tr></table></figure></p>
<h4 id="elementAt"><a href="#elementAt" class="headerlink" title="elementAt"></a>elementAt</h4><p>取出对应下标的元素</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .elementAt(<span class="number">3</span>)</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>结果: <code>🐸</code>     从 0 开始</p>
<h4 id="single"><a href="#single" class="headerlink" title="single"></a>single</h4><p>调用第一个元素（或者符合条件的第一个） ， 如果没有满足的元素将会抛出异常 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .single()</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>result: <code>🐱</code> </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .single &#123; $<span class="number">0</span> == <span class="string">"🐸"</span> &#125;</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>)</div><div class="line">    .single &#123; $<span class="number">0</span> == <span class="string">"🐰"</span> &#125;</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .single &#123; $<span class="number">0</span> == <span class="string">"🔵"</span> &#125;</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>结果： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Next(🐸)</div><div class="line">Completed</div><div class="line">Next(🐰)</div><div class="line">Error(Sequence contains more than one element.)</div><div class="line">Error(Sequence doesn&apos;t contain any elements.)</div></pre></td></tr></table></figure>
<h4 id="take"><a href="#take" class="headerlink" title="take"></a>take</h4><p>从头开始调用指定数量的元素<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .take(<span class="number">3</span>)</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure></p>
<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">🐱</div><div class="line">🐰</div><div class="line">🐶</div></pre></td></tr></table></figure>
<h4 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h4><p>从结尾开始 </p>
<h4 id="takeWhile"><a href="#takeWhile" class="headerlink" title="takeWhile"></a>takeWhile</h4><p>从头开始调直到不满足条件<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">    .takeWhile &#123; $<span class="number">0</span> &lt; <span class="number">4</span> &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure></p>
<p>结果 ：<code>1 2 3</code></p>
<h4 id="takeUntil"><a href="#takeUntil" class="headerlink" title="takeUntil"></a>takeUntil</h4><p><code>Observable</code> 按顺序调用 直到关联的 <code>Observable</code> 调用了后 他自己的就不调用了 </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="keyword">let</span> sourceSequence = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> referenceSequence = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"></div><div class="line">sourceSequence</div><div class="line">    .takeUntil(referenceSequence)</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">sourceSequence.onNext(<span class="string">"🐱"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐰"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐶"</span>)</div><div class="line"></div><div class="line">referenceSequence.onNext(<span class="string">"🔴"</span>)</div><div class="line"></div><div class="line">sourceSequence.onNext(<span class="string">"🐸"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐷"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐵"</span>)</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Next(🐱)</div><div class="line">Next(🐰)</div><div class="line">Next(🐶)</div><div class="line">Completed</div></pre></td></tr></table></figure></p>
<h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>从头开始 跳过 几个 跟take相反</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .skip(<span class="number">2</span>)</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>结果 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">🐶</div><div class="line">🐸</div><div class="line">🐷</div><div class="line">🐵</div></pre></td></tr></table></figure></p>
<h4 id="skipWhile"><a href="#skipWhile" class="headerlink" title="skipWhile"></a>skipWhile</h4><p>从头开始直到条件为false </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>)</div><div class="line">    .skipWhile &#123; $<span class="number">0</span> &lt; <span class="number">4</span> &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>结果 ： <code>4 5 6 3</code></p>
<h4 id="skipWhileWithIndex"><a href="#skipWhileWithIndex" class="headerlink" title="skipWhileWithIndex"></a>skipWhileWithIndex</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🐱"</span>, <span class="string">"🐰"</span>, <span class="string">"🐶"</span>, <span class="string">"🐸"</span>, <span class="string">"🐷"</span>, <span class="string">"🐵"</span>)</div><div class="line">    .skipWhileWithIndex &#123; element, index <span class="keyword">in</span></div><div class="line">        index &lt; <span class="number">3</span></div><div class="line">    &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>结果 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">🐸</div><div class="line">🐷</div><div class="line">🐵</div></pre></td></tr></table></figure></p>
<h4 id="skipUntil"><a href="#skipUntil" class="headerlink" title="skipUntil"></a>skipUntil</h4><p>跟take相反  直到关联的序列开始执行 它才开始<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line"><span class="keyword">let</span> sourceSequence = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> referenceSequence = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"></div><div class="line">sourceSequence</div><div class="line">    .skipUntil(referenceSequence)</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">sourceSequence.onNext(<span class="string">"🐱"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐰"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐶"</span>)</div><div class="line"></div><div class="line">referenceSequence.onNext(<span class="string">"🔴"</span>)</div><div class="line"></div><div class="line">sourceSequence.onNext(<span class="string">"🐸"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐷"</span>)</div><div class="line">sourceSequence.onNext(<span class="string">"🐵"</span>)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">🐸</div><div class="line">🐷</div><div class="line">🐵</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift(五) Transforming Operators（转换操作）]]></title>
      <url>http://yoursite.com/2016/08/16/RxSwift-%E4%BA%94-Transforming-Operators%EF%BC%88%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>本文大多数内容来自RxSwift项目中的<em>Rx.playground</em> , 个人学习记录 。仅供参考，有任何错误，请及时指出。</p>
</blockquote>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>通过一个闭包改变<code>Observable</code> 序列元素，返回一个新的<code>Observable</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    .<span class="built_in">map</span> &#123; $<span class="number">0</span> * $<span class="number">0</span> &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">4</div><div class="line">9</div></pre></td></tr></table></figure></p>
<h4 id="flatMap-和-flatMapLatest"><a href="#flatMap-和-flatMapLatest" class="headerlink" title="flatMap 和 flatMapLatest"></a>flatMap 和 flatMapLatest</h4><p><code>flatMap</code> 可以把一个序列转换成一组序列，然后再把这一组序列『拍扁』成一个序列 。<br><code>flatMapLatest</code> 只保留最新的序列</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Player</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> score: <span class="type">Variable</span>&lt;<span class="type">Int</span>&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> 👦 = <span class="type">Player</span>(score: <span class="type">Variable</span>(<span class="number">80</span>))</div><div class="line"><span class="keyword">let</span> 👧 = <span class="type">Player</span>(score: <span class="type">Variable</span>(<span class="number">90</span>))</div><div class="line"></div><div class="line"><span class="keyword">let</span> player = <span class="type">Variable</span>(👦)</div><div class="line"></div><div class="line">player.asObservable()</div><div class="line">    .flatMap &#123; $<span class="number">0</span>.score.asObservable() &#125; <span class="comment">// 可以换成flatMapLatest试试</span></div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">👦.score.value = <span class="number">85</span></div><div class="line"></div><div class="line">player.value = 👧</div><div class="line"></div><div class="line">👦.score.value = <span class="number">95</span> <span class="comment">// flatMap 会打印 flatMapLatest不会</span></div><div class="line">👧.score.value = <span class="number">100</span></div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">80</div><div class="line">85</div><div class="line">90</div><div class="line">95</div><div class="line">100</div></pre></td></tr></table></figure></p>
<p><code>flatMapLatest</code> 相当于是 <code>map</code> 和 <code>switchLatest</code> 操作的结合 </p>
<h4 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h4><p>把每次的运算结果累积起来，作为下一次运算的输入值。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">   </div><div class="line"><span class="type">Observable</span>.of(<span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>)</div><div class="line">    .scan(<span class="number">1</span>) &#123; aggregateValue, newValue <span class="keyword">in</span></div><div class="line">        aggregateValue + newValue</div><div class="line">    &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="type">Observable</span>.of(<span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>)</div><div class="line">    .scan(<span class="number">1</span>) &#123; aggregateValue, newValue <span class="keyword">in</span></div><div class="line">        aggregateValue + newValue</div><div class="line">    &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">11</div><div class="line">111</div><div class="line">1111</div></pre></td></tr></table></figure></p>
<p> <code>scan</code> 可以付一个初始值</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift(四) Combination Operators]]></title>
      <url>http://yoursite.com/2016/08/16/RxSwift-%E5%9B%9B-Combination-Operators/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>本文大多数内容来自RxSwift项目中的<em>Rx.playground</em> , 个人学习记录 。仅供参考，有任何错误，请及时指出。</p>
</blockquote>
<p>将多个<code>Observable</code> 组装成一个 <code>Observable</code></p>
<h4 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h4><p>会在队列开始之前插入一个事件元素</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.of(<span class="string">"🐶"</span>,<span class="string">"🐱"</span>)</div><div class="line">    .startWith(<span class="string">"1"</span>)</div><div class="line">    .startWith(<span class="string">"2"</span>)</div><div class="line">    .startWith(<span class="string">"3"</span>,<span class="string">"A"</span>,<span class="string">"B"</span>)</div><div class="line">    .subscribeNext&#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>result : </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">3</div><div class="line">A</div><div class="line">B</div><div class="line">2</div><div class="line">1</div><div class="line">🐶</div><div class="line">🐱</div></pre></td></tr></table></figure>
<h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>把两个队列按照顺序组合在一起</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="keyword">let</span> subject1 = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> subject2 = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"></div><div class="line"><span class="type">Observable</span>.of(subject1, subject2)</div><div class="line">    .merge()</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">subject1.onNext(<span class="string">"🅰️"</span>)</div><div class="line">subject1.onNext(<span class="string">"🅱️"</span>)</div><div class="line">subject2.onNext(<span class="string">"①"</span>)</div><div class="line">subject2.onNext(<span class="string">"②"</span>)</div></pre></td></tr></table></figure>
<p>result：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">🅰️</div><div class="line">🅱️</div><div class="line">①</div><div class="line">②</div></pre></td></tr></table></figure>
<h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>就是压缩两条队列用的，不过它会等到两个队列的元素一一对应地凑齐了之后再合并。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line"><span class="keyword">let</span> stringSubject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> intSubject = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line"><span class="type">Observable</span>.<span class="built_in">zip</span>(stringSubject, intSubject) &#123; stringElement, intElement <span class="keyword">in</span></div><div class="line">    <span class="string">"<span class="subst">\(stringElement)</span> ===== <span class="subst">\(intElement)</span>"</span></div><div class="line">    &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">stringSubject.onNext(<span class="string">"🅰️"</span>)</div><div class="line">stringSubject.onNext(<span class="string">"🅱️"</span>)</div><div class="line"></div><div class="line">intSubject.onNext(<span class="number">1</span>)</div><div class="line">intSubject.onNext(<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>result:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">🅰️ ===== 1</div><div class="line">🅱️ ===== 2</div></pre></td></tr></table></figure></p>
<h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><p>如果存在两条事件队列，需要同时监听，那么每当有新的事件发生的时候，combineLatest 会将每个队列的最新的一个元素进行合并。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="keyword">let</span> stringSubject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> intSubject = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line"><span class="type">Observable</span>.combineLatest(stringSubject, intSubject) &#123; stringElement, intElement <span class="keyword">in</span></div><div class="line">    <span class="string">"<span class="subst">\(stringElement)</span> ==== <span class="subst">\(intElement)</span>"</span></div><div class="line">    &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">stringSubject.onNext(<span class="string">"🅰️"</span>)</div><div class="line">stringSubject.onNext(<span class="string">"🅱️"</span>)</div><div class="line"></div><div class="line">intSubject.onNext(<span class="number">1</span>)</div><div class="line">intSubject.onNext(<span class="number">2</span>)</div><div class="line"></div><div class="line">stringSubject.onNext(<span class="string">"🆎"</span>)</div></pre></td></tr></table></figure>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">🅱️ ==== 1</div><div class="line">🅱️ ==== 2</div><div class="line">🆎 ==== 2</div></pre></td></tr></table></figure></p>
<p>CombineLatest 用在数组上</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="keyword">let</span> stringObservable = <span class="type">Observable</span>.just(<span class="string">"❤️"</span>)</div><div class="line"><span class="keyword">let</span> fruitObservable = [<span class="string">"🍎"</span>, <span class="string">"🍐"</span>, <span class="string">"🍊"</span>].toObservable()</div><div class="line"><span class="keyword">let</span> animalObservable = <span class="type">Observable</span>.of(<span class="string">"🐶"</span>, <span class="string">"🐱"</span>, <span class="string">"🐭"</span>, <span class="string">"🐹"</span>)</div><div class="line"></div><div class="line">[stringObservable, fruitObservable, animalObservable].combineLatest &#123;</div><div class="line">    <span class="string">"<span class="subst">\($<span class="number">0</span>[<span class="number">0</span>])</span> <span class="subst">\($<span class="number">0</span>[<span class="number">1</span>])</span> <span class="subst">\($<span class="number">0</span>[<span class="number">2</span>])</span>"</span></div><div class="line">    &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">❤️ 🍊 🐶</div><div class="line">❤️ 🍊 🐱</div><div class="line">❤️ 🍊 🐭</div><div class="line">❤️ 🍊 🐹</div></pre></td></tr></table></figure>
<p>combineLatest 在数组上使用需要所有原 <code>Observable</code> 元素类型相同</p>
<h4 id="switchLatest"><a href="#switchLatest" class="headerlink" title="switchLatest"></a>switchLatest</h4><p>把一个 <code>Observable</code> 赋值给另一个<code>Observable</code> , 会调用最新的 <code>Observable</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">        </div><div class="line"><span class="keyword">let</span> subject1 = <span class="type">BehaviorSubject</span>(value: <span class="string">"⚽️"</span>)</div><div class="line"><span class="keyword">let</span> subject2 = <span class="type">BehaviorSubject</span>(value: <span class="string">"🍎"</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> variable = <span class="type">Variable</span>(subject1)</div><div class="line"></div><div class="line">variable.asObservable()</div><div class="line">    .switchLatest()</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">subject1.onNext(<span class="string">"🏈"</span>)</div><div class="line">subject1.onNext(<span class="string">"🏀"</span>)</div><div class="line"></div><div class="line">variable.value = subject2</div><div class="line"></div><div class="line">subject1.onNext(<span class="string">"⚾️"</span>)  <span class="comment">// 不会打印 已经变成subject2</span></div><div class="line">subject2.onNext(<span class="string">"🍐"</span>)</div></pre></td></tr></table></figure>
<p>结果 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">⚽️</div><div class="line">🏈</div><div class="line">🏀</div><div class="line">🍎</div><div class="line">🍐</div></pre></td></tr></table></figure></p>
<p>例子中 <code>subject1.onNext(&quot;⚾️&quot;)</code> 在 <code>variable.value = subject2</code> 之后是没有作用的 ， 只有最新的<code>Observable</code> 才能发送事件 </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift(三) Subjects]]></title>
      <url>http://yoursite.com/2016/08/16/RxSwift-%E4%B8%89-Subjects/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>本文大多数内容来自RxSwift项目中的<em>Rx.playground</em> , 个人学习记录 。仅供参考，有任何错误，请及时指出。</p>
</blockquote>
<hr>
<blockquote>
<p>Observable像是一个水管，会源源不断的有水冒出来。Subject就像一个水龙头，它可以套在水管上，接受Observable上面的事件。但是作为水龙头，它下面还可以被别的observer给subscribe了</p>
</blockquote>
<h4 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h4><p>发送observer订阅之后的事件，也就是说如果sequence上有.Next 的到来，但是这个时候某个observer还没有subscribe它，这个observer就收不到这条信息，它只会收到它订阅之后发生的事件。<br><a id="more"></a><br>官方demo<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ObservableType</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     通过id添加订阅者</div><div class="line">     - parameter id: id</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addObserver</span><span class="params">(id: String)</span></span> -&gt; <span class="type">Disposable</span> &#123;</div><div class="line">        <span class="keyword">return</span> subscribe &#123; <span class="built_in">print</span>(<span class="string">"Subscription:"</span>, id, <span class="string">"Event:"</span>, $<span class="number">0</span>) &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">subject.subscribe &#123; (event) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"Subscription"</span> , <span class="string">"默认"</span> , <span class="string">"Event:"</span>, event )</div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">subject.addObserver(<span class="string">"1"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🐶"</span>)</div><div class="line">subject.onNext(<span class="string">"🐱"</span>)</div><div class="line"></div><div class="line">subject.addObserver(<span class="string">"2"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🅰️"</span>)</div><div class="line">subject.on(.<span class="type">Next</span>(<span class="string">"🅱️"</span>))</div></pre></td></tr></table></figure></p>
<p>写了个extension 快捷添加subscribe 这里我也写了个不用addObserver的方式。<br>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Subscription 默认 Event: Next(🐶)</div><div class="line">Subscription: 1 Event: Next(🐶)</div><div class="line">Subscription 默认 Event: Next(🐱)</div><div class="line">Subscription: 1 Event: Next(🐱)</div><div class="line">Subscription 默认 Event: Next(🅰️)</div><div class="line">Subscription: 1 Event: Next(🅰️)</div><div class="line">Subscription: 2 Event: Next(🅰️)</div><div class="line">Subscription 默认 Event: Next(🅱️)</div><div class="line">Subscription: 1 Event: Next(🅱️)</div><div class="line">Subscription: 2 Event: Next(🅱️)</div></pre></td></tr></table></figure></p>
<p><code>默认</code> 打印了四次 <code>1</code> 打印了四次 <code>2</code> 打印最后两次 ， 因为两个事件是在它订阅后输出的。</p>
<h4 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h4><p>会给所有订阅者发送事件 ， 还可以指定 <code>bufferSize</code> 数字 表示后面绑定的可以接收前面事件的数量</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> subject = <span class="type">ReplaySubject</span>&lt;<span class="type">String</span>&gt;.create(bufferSize: <span class="number">1</span>)</div><div class="line"></div><div class="line">subject.addObserver(<span class="string">"1"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🐶"</span>)</div><div class="line">subject.onNext(<span class="string">"🐱"</span>)</div><div class="line"></div><div class="line">subject.addObserver(<span class="string">"2"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🅰️"</span>)</div><div class="line">subject.onNext(<span class="string">"🅱️"</span>)</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Subscription: 1 Event: Next(🐶)</div><div class="line">Subscription: 1 Event: Next(🐱)</div><div class="line">Subscription: 2 Event: Next(🐱)</div><div class="line">Subscription: 1 Event: Next(🅰️)</div><div class="line">Subscription: 2 Event: Next(🅰️)</div><div class="line">Subscription: 1 Event: Next(🅱️)</div><div class="line">Subscription: 2 Event: Next(🅱️)</div></pre></td></tr></table></figure></p>
<p><code>2</code> 只接收了🐱 并没有接收🐶 因为我们指定了bufferSize是 1</p>
<h4 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h4><p>当有observer在订阅一个BehaviorSubject的时候，它首先将会收到Observable上最近发送一个信号（或者是默认值），<br>接着才会收到Observable上会发送的序列。</p>
<p>例子 :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> subject = <span class="type">BehaviorSubject</span>(value: <span class="string">"🔴"</span>)</div><div class="line"></div><div class="line">subject.addObserver(<span class="string">"1"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🐶"</span>)</div><div class="line">subject.onNext(<span class="string">"🐱"</span>)</div><div class="line"></div><div class="line">subject.addObserver(<span class="string">"2"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🅰️"</span>)</div><div class="line">subject.onNext(<span class="string">"🅱️"</span>)</div><div class="line"></div><div class="line">subject.addObserver(<span class="string">"3"</span>).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"🍐"</span>)</div><div class="line">subject.onNext(<span class="string">"🍊"</span>)</div></pre></td></tr></table></figure></p>
<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Subscription: 1 Event: Next(🔴)</div><div class="line">Subscription: 1 Event: Next(🐶)</div><div class="line">Subscription: 1 Event: Next(🐱)</div><div class="line">Subscription: 2 Event: Next(🐱)</div><div class="line">Subscription: 1 Event: Next(🅰️)</div><div class="line">Subscription: 2 Event: Next(🅰️)</div><div class="line">Subscription: 1 Event: Next(🅱️)</div><div class="line">Subscription: 2 Event: Next(🅱️)</div><div class="line">Subscription: 3 Event: Next(🅱️)</div><div class="line">Subscription: 1 Event: Next(🍐)</div><div class="line">Subscription: 2 Event: Next(🍐)</div><div class="line">Subscription: 3 Event: Next(🍐)</div><div class="line">Subscription: 1 Event: Next(🍊)</div><div class="line">Subscription: 2 Event: Next(🍊)</div><div class="line">Subscription: 3 Event: Next(🍊)</div></pre></td></tr></table></figure>
<h4 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h4><p>Variable是BehaviorSubject的封装，它和BehaviorSubject不同之处在于，不能向Variable发送.Complete和.Error，它会在生命周期结束被释放的时候自动发送.Complete。</p>
<p>示例：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> variable = <span class="type">Variable</span>(<span class="string">"🔴"</span>)</div><div class="line"></div><div class="line">variable.asObservable().addObserver(<span class="string">"1"</span>).addDisposableTo(disposeBag)</div><div class="line">variable.value = <span class="string">"🐶"</span></div><div class="line">variable.value = <span class="string">"🐱"</span></div><div class="line"></div><div class="line">variable.asObservable().addObserver(<span class="string">"2"</span>).addDisposableTo(disposeBag)</div><div class="line">variable.value = <span class="string">"🅰️"</span></div><div class="line">variable.value = <span class="string">"🅱️"</span></div></pre></td></tr></table></figure></p>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Subscription: 1 Event: Next(🔴)</div><div class="line">Subscription: 1 Event: Next(🐶)</div><div class="line">Subscription: 1 Event: Next(🐱)</div><div class="line">Subscription: 2 Event: Next(🐱)</div><div class="line">Subscription: 1 Event: Next(🅰️)</div><div class="line">Subscription: 2 Event: Next(🅰️)</div><div class="line">Subscription: 1 Event: Next(🅱️)</div><div class="line">Subscription: 2 Event: Next(🅱️)</div><div class="line">Subscription: 1 Event: Completed</div><div class="line">Subscription: 2 Event: Completed</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift(二) 创建并订阅Observables]]></title>
      <url>http://yoursite.com/2016/08/16/RxSwift-%E4%BA%8C-%E5%88%9B%E5%BB%BA%E5%B9%B6%E8%AE%A2%E9%98%85Observables/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>本文大多数内容来自RxSwift项目中的<em>Rx.playground</em> , 个人学习记录 。仅供参考，有任何错误，请及时指出。</p>
</blockquote>
<p>有许多创建 <code>Observable</code> sequence （信号源序列）的方式 , 本文学习手动创建，实际应用中会时候RxCocoa帮我们创建好的，例如一个<code>UILabel</code> 会有一个<br><code>rx_text</code> 属性 返回一个 <code>Observable</code> 对象 ，这个实例的时候再看。</p>
<blockquote>
<p><code>Observable</code>相当于一个被观察的对象，是一个事件序列，订阅者可以订阅他检测事件(Next \ Complete \ Error)<br><a id="more"></a></p>
<h4 id="never"><a href="#never" class="headerlink" title="never"></a>never</h4></blockquote>
<p>创建一个永远不会终止，也不会发出任何事件的sequence </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> neverSequence = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.never()</div><div class="line">&lt;!-- more --&gt;</div><div class="line"><span class="keyword">let</span> neverSequenceSubscription = neverSequence.subscribe &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"永远不会执行"</span>)</div><div class="line">&#125;</div><div class="line">neverSequenceSubscription.addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h4 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h4><p>创建一个只能执行Complete事件的空<code>Observable</code> sequence 。<br><!-- more --><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.empty()</div><div class="line">    .subscribe &#123; (event) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure></p>
<p>执行上面代码会打印出Completed</p>
<h4 id="just"><a href="#just" class="headerlink" title="just"></a>just</h4><p>创建一个只有一个元素的<code>Observable</code> sequence </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"我是唯一的元素"</span>)</div><div class="line">    .subscribe &#123; (event) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>打印结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Next(我是唯一的元素)</div><div class="line">Completed</div></pre></td></tr></table></figure></p>
<h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4><p>创建一个有固定元素个数的<code>Observable</code> seqence</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.of(<span class="string">"小猫"</span>,<span class="string">"🐶"</span>,<span class="string">"🌲"</span>,<span class="string">"🐍"</span>,<span class="string">"🐱"</span>)</div><div class="line">    .subscribeNext&#123; element <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(element)</div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>打印结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">小猫</div><div class="line">🐶</div><div class="line">🌲</div><div class="line">🐍</div><div class="line">🐱</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这个示例介绍了<code>subscribeNext(_:)</code>用法，不像<code>subscribe(_:)</code> 返回一个事件类型的参数（Next, Error, and Completed）。<br><code>subscribeNext(_:)</code> 会忽略 Error 和 Complete 只拿Next事件的元素 。上面的element就是一个String ， 当然也有<code>subscribeError(_:)</code>和<br><code>subscribeCompleted(_:)</code> 方法。还有一个<code>subscribe(onNext:onError:onCompleted:onDisposed:)</code>方法允许你取到更多的事件类型达到你的目的。</p>
</blockquote>
<p>例如:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.of(<span class="string">"小猫"</span>,<span class="string">"🐶"</span>,<span class="string">"🌲"</span>,<span class="string">"🐍"</span>,<span class="string">"🐱"</span>).subscribe(</div><div class="line">                onNext: &#123; <span class="built_in">print</span>(<span class="string">"Element : <span class="subst">\($<span class="number">0</span>)</span>"</span>) &#125;,</div><div class="line">                onError: &#123; <span class="built_in">print</span>(<span class="string">"Error : <span class="subst">\($<span class="number">0</span>)</span>"</span>) &#125;,</div><div class="line">                onCompleted: &#123; <span class="built_in">print</span>(<span class="string">"Completed"</span>) &#125;,</div><div class="line">                onDisposed: &#123; <span class="built_in">print</span>(<span class="string">"Disposed"</span>) &#125;</div><div class="line">            )</div></pre></td></tr></table></figure></p>
<h4 id="toObservable"><a href="#toObservable" class="headerlink" title="toObservable"></a>toObservable</h4><p>使用<code>SequenceType</code>类型创建一个 <code>Observable</code> sequence , 例如数组、字典、Set</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[&quot;🐶&quot;, &quot;🐱&quot;, &quot;🐭&quot;, &quot;🐹&quot;].toObservable()</div><div class="line">            .subscribeNext &#123; print($0) &#125;</div><div class="line">            .addDisposableTo(DisposeBag())</div></pre></td></tr></table></figure>
<p>执行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">🐶</div><div class="line">🐱</div><div class="line">🐭</div><div class="line">🐹</div></pre></td></tr></table></figure></p>
<p>这里是将数组的元素一个一个输出的。</p>
<h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><p>创建一个自定义的<code>Observable</code>sequence</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> myJust = &#123; (element:<span class="type">String</span>) -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> <span class="type">Observable</span>.create(&#123; observer -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">        observer.on(.<span class="type">Next</span>(element))</div><div class="line">        observer.on(.<span class="type">Completed</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">myJust(<span class="string">"🍎"</span>).subscribe&#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这里穿件了一个myJust的闭包，传入 <code>String</code> 返回 <code>Observable</code> , 在创建方法里 我们调用了 Next 和 Complete方法。<br>然后我们对我们的对象添加了观察者。</p>
<h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.range(start: <span class="number">1</span>, <span class="built_in">count</span>: <span class="number">5</span>)</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(4)</div><div class="line">Next(5)</div><div class="line">Completed</div></pre></td></tr></table></figure></p>
<h4 id="repeatElement"><a href="#repeatElement" class="headerlink" title="repeatElement"></a>repeatElement</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.repeatElement(<span class="string">"🔴"</span>)</div><div class="line">    .take(<span class="number">3</span>)</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">🔴</div><div class="line">🔴</div><div class="line">🔴</div></pre></td></tr></table></figure></p>
<p>这块使用take指定次数。</p>
<h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><p>利用迭代器创建一个<code>Observable</code> sequence 只有条件是true才执行</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()    </div><div class="line"><span class="type">Observable</span>.generate(</div><div class="line">    initialState: <span class="number">0</span>,</div><div class="line">    condition: &#123; $<span class="number">0</span> &lt; <span class="number">3</span> &#125;,</div><div class="line">    iterate: &#123; $<span class="number">0</span> + <span class="number">1</span> &#125;</div><div class="line">    )</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出 0,1,2</p>
<h4 id="deferred"><a href="#deferred" class="headerlink" title="deferred"></a>deferred</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> deferredSequence = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.deferred &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Creating <span class="subst">\(<span class="built_in">count</span>)</span>"</span>)</div><div class="line">    <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="type">Observable</span>.create &#123; observer <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"正在调用..."</span>)</div><div class="line">        observer.onNext(<span class="string">"🐶"</span>)</div><div class="line">        observer.onNext(<span class="string">"🐱"</span>)</div><div class="line">        observer.onNext(<span class="string">"🐵"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">deferredSequence</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">deferredSequence</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Creating 1</div><div class="line">正在调用...</div><div class="line">🐶</div><div class="line">🐱</div><div class="line">🐵</div><div class="line">Creating 2</div><div class="line">正在调用...</div><div class="line">🐶</div><div class="line">🐱</div><div class="line">🐵</div></pre></td></tr></table></figure>
<h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><p>创建一个直接返回错误的<code>Observable</code>sequence</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.error(<span class="type">Error</span>.<span class="type">Test</span>)</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出<code>Error(Test)</code><br>这里自定义了一个继承自<code>ErrorType</code>的<code>Error</code>类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum Error : ErrorType &#123;</div><div class="line">    case Test</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="doOn"><a href="#doOn" class="headerlink" title="doOn"></a>doOn</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🍎"</span>, <span class="string">"🍐"</span>, <span class="string">"🍊"</span>, <span class="string">"🍋"</span>)</div><div class="line">    .doOn &#123; <span class="built_in">print</span>(<span class="string">"Intercepted:"</span>, $<span class="number">0</span>) &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这里 <code>doOn</code> 和 <code>subscribe</code> 传入参数和返回值一样只是 <code>doOn</code> 会将异常throws出去</p>
<blockquote>
<p>系统也提供了<code>doOnNext(_:)</code>, <code>doOnError(_:)</code>, <code>doOnCompleted(_:)</code>这些方便的方法，当然还有<code>doOn(onNext:onError:onCompleted:)</code></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift 简介]]></title>
      <url>http://yoursite.com/2016/08/16/RxSwift(%E4%B8%80)-%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>本文大多数内容来自RxSwift项目中的<em>Rx.playground</em> , 个人学习记录 。仅供参考，有任何错误，请及时指出。</p>
</blockquote>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><strong>每个<code>Observable</code>实例都是一个sequence.</strong></p>
<p><code>Observable</code> sequence 的关键点在 <code>SequenceType</code> ， 而且它可以异步获取元素 。 这个是<em>RxSwift</em>的根本，其他的都是建立在这个概念之上的。<br><a id="more"></a></p>
<ul>
<li>一个<code>Observable(ObservableType)</code> 等价于 <code>SequenceType</code></li>
<li><code>ObservableType.subscribe(_:)</code> 方法等价于 <code>SequenceType.generate()</code>。</li>
<li><code>ObservableType.subscribe(_:)</code> 需要一个观察者(<code>ObserverType</code>) 参数，这样将自动接收sequence事件，<br>通过监听自动元素而不用手动调用<code>next()</code>。</li>
</ul>
<p>如果一个 <code>Observable</code> (这里指的是可观察的对象 信号源) 手动调用Next事件 (<code>Event.Next(Element)</code>) , 它可以链式的调用更多的事件 ，如果<code>Observable</code><br>调用了Error事件(<code>Event.Error(ErrorType)</code>) 或者 Completed事件(<code>Event.Completed</code>) , <code>Observable</code> sequence 将不能继续链式调用。</p>
<p>Sequence 语法简要解释：</p>
<p><big><code>Next* (Error | Completed)?</code></big> <br></p>
<p><big><code>--1--2--3--4--5--6--|----&gt;</code></big>  // “|” = 正常终止 <br></p>
<p><big><code>--a--b--c--d--e--f--X----&gt;</code></big>  // “X” = 出错终止 <br></p>
<p><big><code>--tap--tap----------tap--&gt;</code></big>  // “|” = 持续性事件,btn的一系列点击</p>
<h4 id="Observables-and-observers-观察对象和观察者"><a href="#Observables-and-observers-观察对象和观察者" class="headerlink" title="Observables and observers (观察对象和观察者)"></a>Observables and observers (观察对象和观察者)</h4><p><code>Observables</code>如果没有观察者（订阅者），它的事件闭包将不会执行。如下例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">_</span> = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; observerOfString -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"This will never be printed"</span>)</div><div class="line">        observerOfString.on(.<span class="type">Next</span>(<span class="string">"😬"</span>))</div><div class="line">        observerOfString.on(.<span class="type">Completed</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>执行这段代码 ，里面的内容并不会执行。前面加<code>_ =</code>是因为RxSwift 会警告返回值没有使用。</p>
<p>看下面的例子<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">_</span> = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; observerOfString -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"这个将会执行"</span>)</div><div class="line">            observerOfString.on(.<span class="type">Next</span>(<span class="string">"😬"</span>))</div><div class="line">            observerOfString.on(.<span class="type">Completed</span>)</div><div class="line">            <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">            &#125;.subscribe &#123; (event) <span class="keyword">in</span> <span class="comment">// 观察者</span></div><div class="line">                <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>添加了这个<code>subscribe</code>观察者，这段代码执行会打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这个将会执行</div><div class="line">Next(😬)</div><div class="line">Completed</div></pre></td></tr></table></figure></p>
<blockquote>
<p><code>subscribe(_:)</code>返回一个<code>Disposable</code>对象代表一个一次性资源例如订阅者。 上面的例子我们忽略了返回值，正常情况下是需要处理的，<br>一般情况下会把它添加到一个<code>DisposeBag</code>对象中，后面的章节会更多的介绍。</p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
