<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Small Du 的技术blog</title>
  <subtitle>做力所能及的事儿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-16T13:25:56.690Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Small Du</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RxSwift(二) 创建并订阅Observables</title>
    <link href="http://yoursite.com/2016/08/16/RxSwift-%E4%BA%8C-%E5%88%9B%E5%BB%BA%E5%B9%B6%E8%AE%A2%E9%98%85Observables/"/>
    <id>http://yoursite.com/2016/08/16/RxSwift-二-创建并订阅Observables/</id>
    <published>2016-08-16T08:56:48.000Z</published>
    <updated>2016-08-16T13:25:56.690Z</updated>
    
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>本文大多数内容来自RxSwift项目中的<em>Rx.playground</em> , 个人学习记录 。仅供参考，有任何错误，请及时指出。</p>
</blockquote>
<p>有许多创建 <code>Observable</code> sequence （信号源序列）的方式 , 本文学习手动创建，实际应用中会时候RxCocoa帮我们创建好的，例如一个<code>UILabel</code> 会有一个<br><code>rx_text</code> 属性 返回一个 <code>Observable</code> 对象 ，这个实例的时候再看。</p>
<blockquote>
<p><code>Observable</code>相当于一个被观察的对象，是一个事件序列，订阅者可以订阅他检测事件(Next \ Complete \ Error)<br><a id="more"></a></p>
<h4 id="never"><a href="#never" class="headerlink" title="never"></a>never</h4></blockquote>
<p>创建一个永远不会终止，也不会发出任何事件的sequence </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> neverSequence = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.never()</div><div class="line">&lt;!-- more --&gt;</div><div class="line"><span class="keyword">let</span> neverSequenceSubscription = neverSequence.subscribe &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"永远不会执行"</span>)</div><div class="line">&#125;</div><div class="line">neverSequenceSubscription.addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h4 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h4><p>创建一个只能执行Complete事件的空<code>Observable</code> sequence 。<br><!-- more --><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.empty()</div><div class="line">    .subscribe &#123; (event) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure></p>
<p>执行上面代码会打印出Completed</p>
<h4 id="just"><a href="#just" class="headerlink" title="just"></a>just</h4><p>创建一个只有一个元素的<code>Observable</code> sequence </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"我是唯一的元素"</span>)</div><div class="line">    .subscribe &#123; (event) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(event)</div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>打印结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Next(我是唯一的元素)</div><div class="line">Completed</div></pre></td></tr></table></figure></p>
<h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4><p>创建一个有固定元素个数的<code>Observable</code> seqence</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.of(<span class="string">"小猫"</span>,<span class="string">"🐶"</span>,<span class="string">"🌲"</span>,<span class="string">"🐍"</span>,<span class="string">"🐱"</span>)</div><div class="line">    .subscribeNext&#123; element <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(element)</div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>打印结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">小猫</div><div class="line">🐶</div><div class="line">🌲</div><div class="line">🐍</div><div class="line">🐱</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这个示例介绍了<code>subscribeNext(_:)</code>用法，不像<code>subscribe(_:)</code> 返回一个事件类型的参数（Next, Error, and Completed）。<br><code>subscribeNext(_:)</code> 会忽略 Error 和 Complete 只拿Next事件的元素 。上面的element就是一个String ， 当然也有<code>subscribeError(_:)</code>和<br><code>subscribeCompleted(_:)</code> 方法。还有一个<code>subscribe(onNext:onError:onCompleted:onDisposed:)</code>方法允许你取到更多的事件类型达到你的目的。</p>
</blockquote>
<p>例如:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.of(<span class="string">"小猫"</span>,<span class="string">"🐶"</span>,<span class="string">"🌲"</span>,<span class="string">"🐍"</span>,<span class="string">"🐱"</span>).subscribe(</div><div class="line">                onNext: &#123; <span class="built_in">print</span>(<span class="string">"Element : <span class="subst">\($<span class="number">0</span>)</span>"</span>) &#125;,</div><div class="line">                onError: &#123; <span class="built_in">print</span>(<span class="string">"Error : <span class="subst">\($<span class="number">0</span>)</span>"</span>) &#125;,</div><div class="line">                onCompleted: &#123; <span class="built_in">print</span>(<span class="string">"Completed"</span>) &#125;,</div><div class="line">                onDisposed: &#123; <span class="built_in">print</span>(<span class="string">"Disposed"</span>) &#125;</div><div class="line">            )</div></pre></td></tr></table></figure></p>
<h4 id="toObservable"><a href="#toObservable" class="headerlink" title="toObservable"></a>toObservable</h4><p>使用<code>SequenceType</code>类型创建一个 <code>Observable</code> sequence , 例如数组、字典、Set</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[&quot;🐶&quot;, &quot;🐱&quot;, &quot;🐭&quot;, &quot;🐹&quot;].toObservable()</div><div class="line">            .subscribeNext &#123; print($0) &#125;</div><div class="line">            .addDisposableTo(DisposeBag())</div></pre></td></tr></table></figure>
<p>执行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">🐶</div><div class="line">🐱</div><div class="line">🐭</div><div class="line">🐹</div></pre></td></tr></table></figure></p>
<p>这里是将数组的元素一个一个输出的。</p>
<h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><p>创建一个自定义的<code>Observable</code>sequence</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">let</span> myJust = &#123; (element:<span class="type">String</span>) -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> <span class="type">Observable</span>.create(&#123; observer -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">        observer.on(.<span class="type">Next</span>(element))</div><div class="line">        observer.on(.<span class="type">Completed</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">myJust(<span class="string">"🍎"</span>).subscribe&#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这里穿件了一个myJust的闭包，传入 <code>String</code> 返回 <code>Observable</code> , 在创建方法里 我们调用了 Next 和 Complete方法。<br>然后我们对我们的对象添加了观察者。</p>
<h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.range(start: <span class="number">1</span>, <span class="built_in">count</span>: <span class="number">5</span>)</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(4)</div><div class="line">Next(5)</div><div class="line">Completed</div></pre></td></tr></table></figure></p>
<h4 id="repeatElement"><a href="#repeatElement" class="headerlink" title="repeatElement"></a>repeatElement</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.repeatElement(<span class="string">"🔴"</span>)</div><div class="line">    .take(<span class="number">3</span>)</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">🔴</div><div class="line">🔴</div><div class="line">🔴</div></pre></td></tr></table></figure></p>
<p>这块使用take指定次数。</p>
<h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><p>利用迭代器创建一个<code>Observable</code> sequence 只有条件是true才执行</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()    </div><div class="line"><span class="type">Observable</span>.generate(</div><div class="line">    initialState: <span class="number">0</span>,</div><div class="line">    condition: &#123; $<span class="number">0</span> &lt; <span class="number">3</span> &#125;,</div><div class="line">    iterate: &#123; $<span class="number">0</span> + <span class="number">1</span> &#125;</div><div class="line">    )</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出 0,1,2</p>
<h4 id="deferred"><a href="#deferred" class="headerlink" title="deferred"></a>deferred</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> deferredSequence = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.deferred &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Creating <span class="subst">\(<span class="built_in">count</span>)</span>"</span>)</div><div class="line">    <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="type">Observable</span>.create &#123; observer <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"正在调用..."</span>)</div><div class="line">        observer.onNext(<span class="string">"🐶"</span>)</div><div class="line">        observer.onNext(<span class="string">"🐱"</span>)</div><div class="line">        observer.onNext(<span class="string">"🐵"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">deferredSequence</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">deferredSequence</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Creating 1</div><div class="line">正在调用...</div><div class="line">🐶</div><div class="line">🐱</div><div class="line">🐵</div><div class="line">Creating 2</div><div class="line">正在调用...</div><div class="line">🐶</div><div class="line">🐱</div><div class="line">🐵</div></pre></td></tr></table></figure>
<h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><p>创建一个直接返回错误的<code>Observable</code>sequence</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.error(<span class="type">Error</span>.<span class="type">Test</span>)</div><div class="line">    .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出<code>Error(Test)</code><br>这里自定义了一个继承自<code>ErrorType</code>的<code>Error</code>类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum Error : ErrorType &#123;</div><div class="line">    case Test</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="doOn"><a href="#doOn" class="headerlink" title="doOn"></a>doOn</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="type">Observable</span>.of(<span class="string">"🍎"</span>, <span class="string">"🍐"</span>, <span class="string">"🍊"</span>, <span class="string">"🍋"</span>)</div><div class="line">    .doOn &#123; <span class="built_in">print</span>(<span class="string">"Intercepted:"</span>, $<span class="number">0</span>) &#125;</div><div class="line">    .subscribeNext &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这里 <code>doOn</code> 和 <code>subscribe</code> 传入参数和返回值一样只是 <code>doOn</code> 会将异常throws出去</p>
<blockquote>
<p>系统也提供了<code>doOnNext(_:)</code>, <code>doOnError(_:)</code>, <code>doOnCompleted(_:)</code>这些方便的方法，当然还有<code>doOn(onNext:onError:onCompleted:)</code></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;本文大多数内容来自RxSwift项目中的&lt;em&gt;Rx.playground&lt;/em&gt; , 个人学习记录 。仅供参考，有任何错误，请及时指出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有许多创建 &lt;code&gt;Observable&lt;/code&gt; sequence （信号源序列）的方式 , 本文学习手动创建，实际应用中会时候RxCocoa帮我们创建好的，例如一个&lt;code&gt;UILabel&lt;/code&gt; 会有一个&lt;br&gt;&lt;code&gt;rx_text&lt;/code&gt; 属性 返回一个 &lt;code&gt;Observable&lt;/code&gt; 对象 ，这个实例的时候再看。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt;相当于一个被观察的对象，是一个事件序列，订阅者可以订阅他检测事件(Next \ Complete \ Error)&lt;br&gt;
    
    </summary>
    
      <category term="RxSwift" scheme="http://yoursite.com/categories/RxSwift/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="RxSwift" scheme="http://yoursite.com/tags/RxSwift/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift 简介</title>
    <link href="http://yoursite.com/2016/08/16/RxSwift(%E4%B8%80)-%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2016/08/16/RxSwift(一)-简介/</id>
    <published>2016-08-16T08:42:31.000Z</published>
    <updated>2016-08-16T13:25:47.690Z</updated>
    
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>本文大多数内容来自RxSwift项目中的<em>Rx.playground</em> , 个人学习记录 。仅供参考，有任何错误，请及时指出。</p>
</blockquote>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><strong>每个<code>Observable</code>实例都是一个sequence.</strong></p>
<p><code>Observable</code> sequence 的关键点在 <code>SequenceType</code> ， 而且它可以异步获取元素 。 这个是<em>RxSwift</em>的根本，其他的都是建立在这个概念之上的。<br><a id="more"></a></p>
<ul>
<li>一个<code>Observable(ObservableType)</code> 等价于 <code>SequenceType</code></li>
<li><code>ObservableType.subscribe(_:)</code> 方法等价于 <code>SequenceType.generate()</code>。</li>
<li><code>ObservableType.subscribe(_:)</code> 需要一个观察者(<code>ObserverType</code>) 参数，这样将自动接收sequence事件，<br>通过监听自动元素而不用手动调用<code>next()</code>。</li>
</ul>
<p>如果一个 <code>Observable</code> (这里指的是可观察的对象 信号源) 手动调用Next事件 (<code>Event.Next(Element)</code>) , 它可以链式的调用更多的事件 ，如果<code>Observable</code><br>调用了Error事件(<code>Event.Error(ErrorType)</code>) 或者 Completed事件(<code>Event.Completed</code>) , <code>Observable</code> sequence 将不能继续链式调用。</p>
<p>Sequence 语法简要解释：</p>
<p><big><code>Next* (Error | Completed)?</code></big> <br></p>
<p><big><code>--1--2--3--4--5--6--|----&gt;</code></big>  // “|” = 正常终止 <br></p>
<p><big><code>--a--b--c--d--e--f--X----&gt;</code></big>  // “X” = 出错终止 <br></p>
<p><big><code>--tap--tap----------tap--&gt;</code></big>  // “|” = 持续性事件,btn的一系列点击</p>
<h4 id="Observables-and-observers-观察对象和观察者"><a href="#Observables-and-observers-观察对象和观察者" class="headerlink" title="Observables and observers (观察对象和观察者)"></a>Observables and observers (观察对象和观察者)</h4><p><code>Observables</code>如果没有观察者（订阅者），它的事件闭包将不会执行。如下例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">_</span> = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; observerOfString -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"This will never be printed"</span>)</div><div class="line">        observerOfString.on(.<span class="type">Next</span>(<span class="string">"😬"</span>))</div><div class="line">        observerOfString.on(.<span class="type">Completed</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>执行这段代码 ，里面的内容并不会执行。前面加<code>_ =</code>是因为RxSwift 会警告返回值没有使用。</p>
<p>看下面的例子<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">_</span> = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; observerOfString -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"这个将会执行"</span>)</div><div class="line">            observerOfString.on(.<span class="type">Next</span>(<span class="string">"😬"</span>))</div><div class="line">            observerOfString.on(.<span class="type">Completed</span>)</div><div class="line">            <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">            &#125;.subscribe &#123; (event) <span class="keyword">in</span> <span class="comment">// 观察者</span></div><div class="line">                <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>添加了这个<code>subscribe</code>观察者，这段代码执行会打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这个将会执行</div><div class="line">Next(😬)</div><div class="line">Completed</div></pre></td></tr></table></figure></p>
<blockquote>
<p><code>subscribe(_:)</code>返回一个<code>Disposable</code>对象代表一个一次性资源例如订阅者。 上面的例子我们忽略了返回值，正常情况下是需要处理的，<br>一般情况下会把它添加到一个<code>DisposeBag</code>对象中，后面的章节会更多的介绍。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;本文大多数内容来自RxSwift项目中的&lt;em&gt;Rx.playground&lt;/em&gt; , 个人学习记录 。仅供参考，有任何错误，请及时指出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;每个&lt;code&gt;Observable&lt;/code&gt;实例都是一个sequence.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt; sequence 的关键点在 &lt;code&gt;SequenceType&lt;/code&gt; ， 而且它可以异步获取元素 。 这个是&lt;em&gt;RxSwift&lt;/em&gt;的根本，其他的都是建立在这个概念之上的。&lt;br&gt;
    
    </summary>
    
      <category term="RxSwift" scheme="http://yoursite.com/categories/RxSwift/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="RxSwift" scheme="http://yoursite.com/tags/RxSwift/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
</feed>
